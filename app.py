"""
Escape Room de Ciberseguridad - Cyber Bomb
Aplicaci√≥n principal Flask
"""

from flask import Flask, render_template, request, redirect, url_for, session, flash, jsonify
from utils.crypto import decrypt_caesar
import secrets
import re
import time

app = Flask(__name__)
app.secret_key = secrets.token_hex(32)

# Configuraci√≥n del juego
INITIAL_TIME = 600  # 10 minutos en segundos
INITIAL_HINTS = 8  # M√°s pistas iniciales
TIME_BONUS = 30  # segundos por nivel completado
HINT_PENALTY = 8  # menos penalizaci√≥n por pista (era 10)
HINT_BONUS = 2  # pistas adicionales por nivel completado

# Definici√≥n de niveles
LEVELS = [
    {
        "type": "password",
        "title": "Contrase√±a D√©bil",
        "prompt": "Ingresa la contrase√±a del administrador del sistema.",
        "solution": "1234",
        "hint": "El admin nunca cambia su clave‚Ä¶ empieza con 1.",
        "success_message": "¬°Excelente! Has aprendido sobre contrase√±as d√©biles. üí° TIP: Las contrase√±as como '1234', 'password' o 'admin' son extremadamente vulnerables. Siempre usa contrase√±as complejas con may√∫sculas, min√∫sculas, n√∫meros y s√≠mbolos.",
        "additional_hints": [
            "Es una secuencia num√©rica muy simple",
            "Piensa en los n√∫meros m√°s b√°sicos",
            "Es una contrase√±a de 4 d√≠gitos",
            "Los administradores perezosos usan contrase√±as obvias",
            "Empieza con 1 y sigue con 2, 3, 4...",
            "Es la secuencia m√°s b√°sica que existe",
            "Los n√∫meros van en orden ascendente",
            "¬°Es tan simple que un ni√±o la adivinar√≠a!"
        ]
    },
    {
        "type": "caesar",
        "title": "Cifrado C√©sar",
        "prompt": "Descifra el mensaje encriptado usando el cifrado C√©sar. El mensaje fue cifrado con un desplazamiento de 3 posiciones hacia adelante en el alfabeto.",
        "encrypted_message": "WKH VHFUHW SDVVZRUG LV FLEHUVHFXULGDG",
        "solution": "THE SECRET PASSWORD IS CYBERSECURITY",
        "hint": "El cifrado C√©sar desplaza cada letra 3 posiciones hacia atr√°s en el alfabeto. A=D, B=E, C=F, etc. Para descifrar, mueve cada letra 3 posiciones hacia atr√°s.",
        "success_message": "¬°Fant√°stico! Has dominado el cifrado C√©sar. üîê TIP: El cifrado C√©sar es uno de los m√©todos m√°s antiguos de encriptaci√≥n. Aunque es f√°cil de romper con an√°lisis de frecuencia, fue usado por Julio C√©sar para comunicaciones militares. Los m√©todos modernos como AES son mucho m√°s seguros.",
        "additional_hints": [
            "Usa la herramienta de descifrado con desplazamiento 3",
            "El mensaje contiene la palabra 'SECRET'",
            "La respuesta final es sobre ciberseguridad",
            "Cada letra se mueve 3 posiciones hacia atr√°s en el alfabeto",
            "W se convierte en T, K se convierte en H, H se convierte en E",
            "El mensaje descifrado habla de una contrase√±a secreta",
            "La palabra final es 'CYBERSECURITY'",
            "Usa el bot√≥n 'Descifrar' en la herramienta",
            "El resultado debe ser: THE SECRET PASSWORD IS CYBERSECURITY"
        ]
    },
    {
        "type": "phishing",
        "title": "Caza-Phish",
        "prompt": "¬øCu√°l de estos correos es leg√≠timo?",
        "options": [
            {"id": "a", "label": "Soporte: http://seguridad-banco-login.co", "is_correct": False, "domain": "banco-login.co"},
            {"id": "b", "label": "Promos: http://free-iphone.me", "is_correct": False, "domain": "free-iphone.me"},
            {"id": "c", "label": "Banco oficial: https://banco.com/seguridad", "is_correct": True, "domain": "banco.com"}
        ],
        "hint": "Observa el dominio real del enlace.",
        "success_message": "¬°Perfecto! Has identificado correctamente el correo leg√≠timo. üõ°Ô∏è TIP: Los ataques de phishing son muy comunes. Siempre verifica la URL completa, busca certificados SSL v√°lidos, y nunca hagas clic en enlaces sospechosos. Los bancos nunca te pedir√°n datos por email.",
        "additional_hints": [
            "Los dominios leg√≠timos suelen ser simples y reconocibles",
            "Evita dominios con guiones o extensiones extra√±as",
            "El banco oficial tendr√≠a un dominio .com limpio",
            "Los atacantes usan dominios similares pero no id√©nticos",
            "banco-login.co tiene un gui√≥n sospechoso",
            "free-iphone.me suena demasiado bueno para ser verdad",
            "banco.com es el dominio m√°s limpio y profesional",
            "Los bancos reales usan dominios cortos y memorables",
            "La opci√≥n C es la √∫nica con HTTPS y dominio limpio",
            "Los phishers copian nombres pero cambian extensiones"
        ]
    },
    {
        "type": "ransomware",
        "title": "Explosi√≥n Ransomware ‚Äî 'La llave perdida'",
        "prompt": "Recupera la clave de desencriptaci√≥n antes de que se acabe el tiempo",
        "solution": "BLUEBELL2025",
        "hint": "PISTAS IMPORTANTES:\n1. Usa el decodificador Base64 con \"QkxVRQ==\"\n2. Resuelve el anagrama \"LEBEL\"\n3. Calcula 32 XOR 48 (no 32 elevado a 48)\n4. Los n√∫meros 52, 30, 25 forman un a√±o\n5. La clave final es: PALABRA1 + PALABRA2 + A√ëO (todo junto, sin espacios)",
        "success_message": "¬°Incre√≠ble! Has resuelto el ransomware y recuperado los archivos. üéâ TIP: Los ransomware son una amenaza real. Siempre mant√©n copias de seguridad actualizadas, no abras archivos sospechosos, y mant√©n tu software actualizado. La prevenci√≥n es la mejor defensa contra estos ataques.",
        "additional_hints": [
            "Base64 'QkxVRQ==' se decodifica como 'BLUE'",
            "LEBEL es un anagrama de 'BELL'",
            "32 XOR 48 = 16 (usa la operaci√≥n XOR)",
            "Los n√∫meros 52, 30, 25 forman el a√±o 2025",
            "Combina: BLUE + BELL + 2025 = BLUEBELL2025",
            "Usa la herramienta Base64 Decoder con QkxVRQ==",
            "Resuelve el anagrama LEBEL para obtener BELL",
            "Calcula 32 XOR 48 usando la herramienta XOR Calculator",
            "Los n√∫meros 52, 30, 25 forman 2025 (a√±o actual)",
            "La clave final es BLUEBELL2025 (todo junto)",
            "No uses espacios en la respuesta final",
            "La clave tiene 13 caracteres en total"
        ],
        "files": [
            {"name": "documento.txt.locked", "clue": "QkxVRQ== (Pista: Esto parece Base64, ¬°decodif√≠calo!)"},
            {"name": "imagen.jpg.locked", "clue": "LEBEL (Pista: Las letras est√°n mezcladas, ¬°ord√©nalas!)"},
            {"name": "video.mp4.locked", "clue": "32^48 (Pista: Usa XOR, no potencia matem√°tica)"},
            {"name": "backup.zip.locked", "clue": "52 (Pista: Parte del a√±o final)"},
            {"name": "config.ini.locked", "clue": "30 (Pista: Tambi√©n parte del a√±o)"},
            {"name": "data.db.locked", "clue": "25 (Pista: Completa el a√±o 20_)"}
        ],
        "ransom_note": "üîí TUS ARCHIVOS HAN SIDO ENCRIPTADOS üîí\n\nPara recuperar tus archivos, necesitas la clave maestra.\nLas pistas est√°n ocultas en los nombres y metadatos.\n\nüí° Pista: Los n√∫meros al final no son casualidad..."
    }
]


def init_session():
    """Inicializa la sesi√≥n del juego"""
    if "time_left" not in session:
        session["time_left"] = INITIAL_TIME
    if "level" not in session:
        session["level"] = 0
    if "hints_left" not in session:
        session["hints_left"] = INITIAL_HINTS
    if "status" not in session:
        session["status"] = "playing"
    if "performance_data" not in session:
        session["performance_data"] = []
    if "question_start_time" not in session:
        session["question_start_time"] = time.time()
    if "individual_times" not in session:
        session["individual_times"] = []  # Lista para almacenar tiempos individuales
    if "hint_count" not in session:
        session["hint_count"] = 0  # Contador de pistas usadas en el nivel actual


def validate_time():
    """Valida que el tiempo no se haya agotado"""
    if session.get("time_left", 0) <= 0:
        session["status"] = "lost"
        return False
    return True


def get_current_level():
    """Obtiene el nivel actual"""
    level_index = session.get("level", 0)
    if level_index < len(LEVELS):
        return LEVELS[level_index]
    return None


def registrar_respuesta(pregunta_id, texto_pregunta, es_correcta, tiempo_individual=None):
    """Registra el rendimiento de una respuesta del jugador"""
    tiempo_actual = time.time()
    tiempo_respuesta = tiempo_actual - session.get("question_start_time", tiempo_actual)
    
    # Usar el tiempo individual del frontend si est√° disponible
    if tiempo_individual is not None:
        tiempo_respuesta = float(tiempo_individual)
    
    datos_pregunta = {
        "id_pregunta": pregunta_id,
        "texto_pregunta": texto_pregunta,
        "tiempo_respuesta": round(tiempo_respuesta, 2),
        "es_respuesta_correcta": es_correcta
    }
    
    if "performance_data" not in session:
        session["performance_data"] = []
    
    if "individual_times" not in session:
        session["individual_times"] = []
    
    session["performance_data"].append(datos_pregunta)
    
    # Registrar tiempo individual con informaci√≥n de la pregunta
    tiempo_info = {
        "pregunta_numero": pregunta_id,
        "titulo_pregunta": texto_pregunta,
        "tiempo_segundos": round(tiempo_respuesta, 2),
        "es_correcta": es_correcta
    }
    session["individual_times"].append(tiempo_info)
    
    session["question_start_time"] = tiempo_actual  # Reiniciar para la siguiente pregunta


@app.route('/')
def home():
    """P√°gina de inicio"""
    return render_template('home.html')


@app.route('/howto')
def howto():
    """P√°gina de instrucciones"""
    return render_template('howto.html')


@app.route('/game', methods=['GET', 'POST'])
def game():
    """Pantalla principal del juego"""
    init_session()
    
    # Verificar si el juego ya termin√≥
    if session["status"] != "playing":
        if session["status"] == "won":
            return redirect(url_for('win'))
        elif session["status"] == "lost":
            return redirect(url_for('lose'))
    
    # Validar tiempo
    if not validate_time():
        return redirect(url_for('lose'))
    
    current_level = get_current_level()
    if not current_level:
        session["status"] = "won"
        return redirect(url_for('win'))
    
    error_message = ""
    success_message = ""
    
    if request.method == 'POST':
        # Sincronizar tiempo del cliente con el servidor
        client_time = request.form.get('time_left', type=int)
        if client_time is not None:
            session["time_left"] = min(session["time_left"], client_time)
        
        # Validar tiempo nuevamente despu√©s de sincronizaci√≥n
        if not validate_time():
            return redirect(url_for('lose'))
        
        # Capturar tiempo individual de respuesta del frontend
        tiempo_individual = request.form.get('question_response_time')
        
        # Procesar respuesta seg√∫n el tipo de nivel
        if current_level["type"] == "password":
            answer = request.form.get('password', '').strip()
            if answer == current_level["solution"]:
                # Guardar mensaje de √©xito
                session["success_message"] = current_level.get("success_message", "¬°Excelente! Has completado el nivel.")
                session["level"] += 1
                session["time_left"] += TIME_BONUS
                session["hints_left"] += HINT_BONUS  # Otorgar pistas adicionales
                session["hint_count"] = 0  # Reiniciar contador de pistas para el nuevo nivel
                # Verificar si complet√≥ todos los niveles
                if session["level"] >= len(LEVELS):
                    session["status"] = "won"
                    return redirect(url_for('win'))
                # Redirigir para mostrar el siguiente nivel
                return redirect(url_for('game'))
            else:
                error_message = "Contrase√±a incorrecta. Intenta de nuevo."
        
        elif current_level["type"] == "caesar":
            answer = request.form.get('caesar_answer', '').strip().upper()
            es_correcta = answer == current_level["solution"]
            registrar_respuesta(session["level"] + 1, current_level["prompt"], es_correcta, tiempo_individual)
            
            if es_correcta:
                # Guardar mensaje de √©xito
                session["success_message"] = current_level.get("success_message", "¬°Excelente! Has completado el nivel.")
                session["level"] += 1
                session["time_left"] += TIME_BONUS
                session["hints_left"] += HINT_BONUS  # Otorgar pistas adicionales
                session["hint_count"] = 0  # Reiniciar contador de pistas para el nuevo nivel
                # Verificar si complet√≥ todos los niveles
                if session["level"] >= len(LEVELS):
                    session["status"] = "won"
                    return redirect(url_for('win'))
                # Redirigir para mostrar el siguiente nivel
                return redirect(url_for('game'))
            else:
                error_message = "Mensaje descifrado incorrecto. Revisa tu cifrado C√©sar."
        
        elif current_level["type"] == "phishing":
            answer = request.form.get('phishing_choice', '')
            correct_option = next((opt for opt in current_level["options"] if opt["is_correct"]), None)
            es_correcta = answer == correct_option["id"]
            registrar_respuesta(session["level"] + 1, current_level["prompt"], es_correcta, tiempo_individual)
            
            if es_correcta:
                # Guardar mensaje de √©xito
                session["success_message"] = current_level.get("success_message", "¬°Excelente! Has completado el nivel.")
                session["level"] += 1
                session["time_left"] += TIME_BONUS
                session["hints_left"] += HINT_BONUS  # Otorgar pistas adicionales
                session["hint_count"] = 0  # Reiniciar contador de pistas para el nuevo nivel
                # Verificar si complet√≥ todos los niveles
                if session["level"] >= len(LEVELS):
                    session["status"] = "won"
                    return redirect(url_for('win'))
                # Redirigir para mostrar el siguiente nivel
                return redirect(url_for('game'))
            else:
                error_message = "Incorrecto. Revisa los dominios de los enlaces."
        
        elif current_level["type"] == "ransomware":
            answer = request.form.get('ransomware_key', '').strip().upper()
            es_correcta = answer == current_level["solution"]
            registrar_respuesta(session["level"] + 1, current_level["prompt"], es_correcta, tiempo_individual)
            
            if es_correcta:
                # Guardar mensaje de √©xito
                session["success_message"] = current_level.get("success_message", "¬°Excelente! Has completado el nivel.")
                session["level"] += 1
                session["time_left"] += TIME_BONUS
                session["hints_left"] += HINT_BONUS  # Otorgar pistas adicionales
                session["hint_count"] = 0  # Reiniciar contador de pistas para el nuevo nivel
                # Verificar si complet√≥ todos los niveles
                if session["level"] >= len(LEVELS):
                    session["status"] = "won"
                    return redirect(url_for('win'))
                # Redirigir para mostrar el siguiente nivel
                return redirect(url_for('game'))
            else:
                error_message = "Clave de desencriptaci√≥n incorrecta. Analiza las pistas m√°s cuidadosamente."
    
    # Obtener mensaje de √©xito de la sesi√≥n si existe
    session_success_message = session.pop("success_message", None)
    if session_success_message:
        success_message = session_success_message
    
    return render_template('game.html', 
                         level=current_level, 
                         level_number=session["level"] + 1,
                         total_levels=len(LEVELS),
                         time_left=session["time_left"],
                         hints_left=session["hints_left"],
                         error_message=error_message,
                         success_message=success_message)


@app.route('/hint', methods=['POST'])
def hint():
    """Procesa la solicitud de pista"""
    init_session()
    
    if not validate_time():
        return redirect(url_for('lose'))
    
    # Sincronizar tiempo del cliente
    client_time = request.form.get('time_left', type=int)
    if client_time is not None:
        session["time_left"] = min(session["time_left"], client_time)
    
    if session["hints_left"] > 0:
        session["hints_left"] -= 1
        session["time_left"] -= HINT_PENALTY
        
        current_level = get_current_level()
        if current_level:
            # Sistema de pistas progresivas
            hint_count = session.get("hint_count", 0)
            hint_count += 1
            session["hint_count"] = hint_count
            
            # Primera pista: pista principal
            if hint_count == 1:
                hint_text = current_level["hint"]
            # Pistas adicionales si est√°n disponibles
            elif "additional_hints" in current_level and hint_count <= len(current_level["additional_hints"]) + 1:
                hint_text = current_level["additional_hints"][hint_count - 2]
            else:
                hint_text = "No hay m√°s pistas espec√≠ficas para este nivel. ¬°Usa tu ingenio!"
            
            return jsonify({
                "hint": hint_text, 
                "hints_left": session["hints_left"],
                "hint_number": hint_count,
                "total_hints": len(current_level.get("additional_hints", [])) + 1
            })
    
    return jsonify({"hint": "No tienes m√°s pistas disponibles.", "hints_left": session["hints_left"]})


@app.route('/reset')
def reset():
    """Reinicia el juego"""
    session.clear()
    return redirect(url_for('home'))


@app.route('/win')
def win():
    """P√°gina de victoria"""
    if session.get("status") != "won":
        return redirect(url_for('home'))
    
    # Calcular estad√≠sticas finales
    tiempo_total = INITIAL_TIME - session.get("time_left", 0)
    performance_data = session.get("performance_data", [])
    individual_times = session.get("individual_times", [])
    
    # Calcular estad√≠sticas de rendimiento
    total_preguntas = len(performance_data)
    respuestas_correctas = sum(1 for p in performance_data if p["es_respuesta_correcta"])
    tiempo_promedio = sum(p["tiempo_respuesta"] for p in performance_data) / total_preguntas if total_preguntas > 0 else 0
    
    # Calcular estad√≠sticas de tiempos individuales
    tiempo_total_individual = sum(t["tiempo_segundos"] for t in individual_times)
    tiempo_promedio_individual = tiempo_total_individual / len(individual_times) if individual_times else 0
    
    stats = {
        "tiempo_total": tiempo_total,
        "total_preguntas": total_preguntas,
        "respuestas_correctas": respuestas_correctas,
        "tiempo_promedio": round(tiempo_promedio, 2),
        "performance_data": performance_data,
        "individual_times": individual_times,
        "tiempo_total_individual": round(tiempo_total_individual, 2),
        "tiempo_promedio_individual": round(tiempo_promedio_individual, 2)
    }
    
    return render_template('win.html', stats=stats)


@app.route('/lose')
def lose():
    """Pantalla de derrota"""
    if session.get("status") != "lost":
        return redirect(url_for('home'))
    
    return render_template('lose.html')


if __name__ == '__main__':
    app.run(debug=True, port=5001)
